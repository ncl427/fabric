syntax = "proto3";

package ziti.ctrl.pb;
option go_package = "github.com/openziti/fabric/pb/ctrl_pb";

enum ContentType {
  Zero = 0;

  CircuitRequestType = 1000;
  // defined in ctrl_msg/messages.go now
  // CircuitSuccessType = 1001;
  DialType = 1002;
  LinkConnectedType = 1003;
  FaultType = 1004;
  RouteType = 1005;
  UnrouteType = 1006;
  MetricsType = 1007;
  TogglePipeTracesRequestType = 1008;
  TraceEventType = 1010;
  CreateTerminatorRequestType = 1011;
  RemoveTerminatorRequestType = 1012;
  InspectRequestType = 1013;
  InspectResponseType = 1014;
  // defined in ctrl_msg/messages.go now
  // CircuitFailedType = 1016;
  ValidateTerminatorsRequestType = 1017;
  UpdateTerminatorRequestType = 1018;
  VerifyLinkType = 1019;
  SettingsType = 1020;
  CircuitConfirmationType = 1034;
  RouterLinksType = 1035;

  ListenersHeader = 10;
  DialersHeader = 11;
}

// SettingTypes are used with the Settings message send arbitrary settings to routers.
// SettingTypes default to int32 which can be used seamlessly for keys in the Settings.data field
enum SettingTypes {
  //unused, consume to avoid zero value accidents
  UnusedSetting = 0;
  //Sent to routers to notify them of a controller IP/hostname move
  NewCtrlAddress = 1;
}

// Settings are sent to to routers to configure arbitrary runtime settings.
message Settings {
  map<int32, bytes> data = 1;
}

message CircuitRequest {
  string ingressId = 1;
  string service = 2;
  map<uint32, bytes> peerData = 3;
}

message CircuitConfirmation {
  repeated string circuitIds = 1;
}

enum TerminatorPrecedence {
  Default = 0;
  Required = 1;
  Failed = 2;
}

message CreateTerminatorRequest {
  string serviceId = 2;
  string binding = 3;
  string address = 4;
  map<uint32, bytes> peerData = 5;
  uint32 cost = 6;
  TerminatorPrecedence precedence = 7;
  string identity = 8;
  bytes identitySecret = 9;
}

message RemoveTerminatorRequest {
  string terminatorId = 1;
}

message Terminator {
  string id = 1;
  string binding = 2;
  string address = 3;
}

message ValidateTerminatorsRequest {
  repeated Terminator terminators = 1;
}

message UpdateTerminatorRequest {
  string terminatorId = 1;
  bool updatePrecedence = 2;
  bool updateCost = 3;
  TerminatorPrecedence precedence = 4;
  uint32 cost = 5;
}

message Dial {
  string linkId = 1;
  string address = 2;
  string routerId = 3;
  string linkProtocol = 4;
  string routerVersion = 5;
  string group = 6;
  string localBinding = 7;
}

message LinkConnected {
  string id = 1;
}

message RouterLinks {
  message RouterLink {
    string id = 1;
    string destRouterId = 2;
    string linkProtocol = 3;
    repeated string linkCostTags = 4;
  }

  repeated RouterLink links = 1;
}

enum FaultSubject {
  IngressFault = 0;
  EgressFault = 1;
  LinkFault = 2;
  ForwardFault = 3;
}

message Fault {
  FaultSubject subject = 1;
  string id = 2;
}

message Context {
  map<string, string> fields = 1;
  uint32 channelMask = 2;
}

message Route {
  string circuitId = 1;
  uint32 attempt = 2;

  message Egress {
    string binding = 1;
    string address = 2;
    string destination = 3;
    map<uint32, bytes> peerData = 4;
  }
  Egress egress = 3;

  message Forward {
    string srcAddress = 1;
    string dstAddress = 2;
  }
  repeated Forward forwards = 4;
  Context context = 5;
}

message Unroute {
  string circuitId = 1;
  bool now = 2;
}

message InspectRequest {
  repeated string requestedValues = 1;
}

message InspectResponse {
  bool success = 1;
  repeated string errors = 2;
  repeated InspectValue values = 3;

  message InspectValue {
    string name = 1;
    string value = 2;
  }
}

message VerifyLink {
  string linkId = 1;
  repeated string fingerprints = 2;
}

message Dialer {
  string localBinding = 1;
  string group = 2;
}

message Dialers {
  repeated Dialer dialers = 1;
}

message Listener {
  string address = 1;
  string protocol = 2;
  repeated string costTags = 3;
  string group = 4;
}

message Listeners {
  repeated Listener listeners = 1;
}